//examles

Sample Input 1 :
2
10 3
CBAEBABACD
ABC
5 2
ABADE
BA
Sample Output 1 :
0 6
0 1
Explanation For Sample Output 1:
Test Case 1:

'STR' is ‘CBAEBABACD’ and ‘PTR’ is ‘ABC’.

0-2 in 'STR' index 0,1,2 are ‘CBA’, and it is an anagram with ‘ABC’.
1-3 in 'STR' index 1,2,3 are ‘BAE’, and it is not anagram with ‘ABC’.
2-4 in 'STR' index 2,3,4 are ‘AEB’, and it is not anagram with ‘ABC’.
3-5 in 'STR' index 3,4,5 are ‘EBA’, and it is not anagram with ‘ABC’.
4-6 in 'STR' index 4,5,6 are ‘BAB’, and it is not anagram with ‘ABC’.
5-7 in 'STR' index 5,6,7 are ‘ABA’, and it is not anagram with ‘ABC’.
6-8 in 'STR' index 6,7,8 are ‘BAC’, and it is an anagram with ‘ABC’.
7-9 in 'STR' index 7,8,9 are ‘ACD’, and it is not anagram with ‘ABC’.

Hence, there are only two substrings in the given string 'STR'  that are anagram with given string  ‘PTR’ which are ‘CBA’, and ‘BAC’ and starting indices of respective anagram substrings are 0 and 6.


//main code


bool isequal(int a[26],int b[26]){
    for(int i=0;i<26;i++){
        if(a[i]!=b[i]){
            return 0;
        }
    }
    return 1;
}


vector<int> findAnagramsIndices(string str, string ptr, int n, int m){
    // Write you code here.
    //find the count of ptr
    vector<int>ans;
    int count1[26]={0};
    int count2[26]={0};
    int i=0;
    int num=0;
    while(i<m){
        char c=ptr[i];
num=c-'A';
count1[num]++;
i++;
    }
    //store the count of str till window size m 
    int j=0;
    while(j<m&&m<n){
        char ch=str[j];
        num=ch-'A';
        count2[num]++;
        j++;
    }
    if(isequal(count1,count2)){
int first=j-m;
ans.push_back(first);
    }
//add new char 
int s=j;
while(s<n){
    char c=str[s];
    num=c-'A';
    count2[num]++;
    //remove last char 
    c=str[s-m];
    num=c-'A';
    count2[num]--;
if(isequal(count1,count2)){
    int q=s-m+1;
    ans.push_back(q);
}
s++;


}


    return ans;
}

