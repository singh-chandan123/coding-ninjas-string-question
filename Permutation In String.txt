//examples
Sample Input 1 :
2
2 5
ab ebbao
1 3 
b acd
Sample Output 1 :
Yes
No
Explanation Of The Sample Input 1 :
In the First Test Case :
Permutations of first-string str1 i.e. “ab” are [“ab”, “ba”].
The substrings of str2 i.e. “ebbao” are [“e”, “b”, “b”, “a”, “o”, “eb”, “bb”,  “ba”, “ao”,  “ebb”, “bba”, “bao”,  “ebba”, “bbao”, “ebbao”].
The string “ba” is present in the list of substrings of string str2.

In the Second Test Case :
Permutations of first-string str1 i.e. “b” are [“b”].
The substrings of str2, i.e. “acd” are [“a”, “c”, “d”, “ac”, “cd”, “acd”]. 
The string “b” is not present in the list of substrings of string str2.


//main code

#include <bits/stdc++.h> 
bool compare(int count[],int count1[]){
    for(int i=0;i<26;i++){
if(count[i]!=count1[i]){
    return false;
}
    }
    return true;
}
string permutationExist(string str1, string str2, int n, int m)
{
   string s="Yes";
   string st="No";
   int count[26]={0};
   int count1[26]={0};
   //store count of str1
   for(int i=0;i<n;i++){
       int ch=str1[i];

       int num=ch-'a';
       count[num]++;
   }

 //traverse on str2 through window size n
 int j=0;
 while( j<n){
char c=str2[j];
int num=c-'a';
count1[num]++; 
j++;   
 }
 //agar equal toh return yes
 if(compare(count,count1)){
     return s;
 }
int i=j;
while(i<m){
//adding new charcter
char c=str2[i];
int num=c-'a';
count1[num]++;
//remove character
 c=str2[i-n];
 num=c-'a';
count1[num]--;
if(compare(count,count1)){
    return s;
}
i++;
}
return st;

}
